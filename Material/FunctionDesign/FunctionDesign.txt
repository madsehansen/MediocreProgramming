Function/method design

Naming
    Naming things is hard but important
    Functions should do one thing and be named accordingly
    Name functions for what they do, not how

Arguments
    By value, reference, pointer, and when to const
        Use by value
            When small and fast to copy
            When you are going to move the value to take ownership of data
        Use by reference
            When large or otherwise slow to copy
            When you need access to the actual object passed
            When there has to be an object there
        Use by pointer
            When large and slow to copy
            When you need access to the actual object passed
            When you accept that there might not be an object (nullptr)
        When to const
            As much as possible
            As long as you do not need to modify the argument
            As long as the argument type is const correct
    Hidden argument "this", and the dependency implications
        <What did I mean here?>
        Methods have access to full object, consider using free functions where possible

Return value
    By value, reference, pointer, and when to const
        Use by value
            Mostly
            When the function constructs the returned value
            To protect against exposing internals to the application
        Use by reference
            When the function returns access to a member to something guaranteed to survive the call, so no local variables
            When the function returns access to an object held by this object, like in containers
        Use by pointer
            When the function returns a potential access to a member of something guaranteed to survive the call, so no local variables
            When the function returns a potential access to an object held by this object, like in containers
            Note that this can be done by returning an optional<>, which makes for clearer code
        When to const
            When returning access to internals, by reference or pointer
                This is to avoid having clients use the access to internals to break the class invariant
            Also when operating on const data, including const methods
    Return value optimization (RVO and NRVO)
        This basically makes a lot of copying go away
        Construct the object to return in the return statement
        Or construct one object that is returned from all paths
        Never std::move() in a return statement
        Never enclose the returned value in parenthesis
            return ("hello"); -> This blocks RVO
            return "hello"; -> This does not block RVO, so a copy/move is elided
            return std::string("hello"); -> This does not block RVO, so a copy/move is elided
    Returning more than one thing
        Output paramenters
            Do not use this, as a general rule
            In some cases can be faster, but this should be tested and measured and the need for speed should be documented for the function
        Return a struct
            This creates a single entity that can be returned
            Can have any amount of data
            Keep small, to avoid having to deal with large objects
            Gives names to each field
        Return a class
            Basically the same as for structs, but also implies some invariant
            More natural to have query methods for checking the returned value(s)

Argument order
    When deciding the order of arguments a few things should be considered
        Default arguments
            These, by language rules, must be last
        Common use
            The arguments that would be "fixed" in a currying should be first
            This makes the STL incorrect, as the range of data to operate on would vary, rather than the operation to perform
            There is a std::bind_front() that basically provides currying, in C++20
            There is a std::bind_back() to remedy the reversed currying, in C++23
        Overloads
            Should have the same order for arguments that are the same
                If possible the less-arguments function should call the more-argument function
                This makes the difference in arguments potential default arguments and the less-argument function can be removed

Contract
    Const methods
        Const all methods that do not change the observable state of the object
        Cached calculations can be "mutable" so that they can be modified in const methods
        Do not change any observable state in a const method, ever
        Mutexes must be mutable, since it is necessary to lock them even in const methods
            They are not really observable outside the class anyway, so this is ok
            If the method returns access to some internal data, the mutex must remain locked
                This calls for a locked_ptr type of return value

Do or do not
    This is about surprises, surprises are bad
    Any function should either succeed or do nothing (observable)
        Especially important for methods
        Do not allow the system to get into a "halfway state"
        Remember that exceptions can occur at nearly any point
        Copying of native types and pointers do not throw, so this can be done after the results are ready to set the new state
        Basic order of operations then becomes
            Check arguments and state
                If these are bad or not compatible, no further processing, report the problem
            Perform operation on temporary data
                If this fails, only temporary data have been affected and these will be cleaned up
                Report the problem
            Swap in results from temporary data to members
                This should not be able to fail (only simple copying of non-throwing data)
        This is often simplified, but should be considered for all methods modifying the object
            Ending up in a halfway state is potentially difficult to figure out and debug
            Program is basically undefined behaviour from that point
        This will often be more lines, but correct code is better than cute code

Pure functions
    A pure function
        is a function that only reads its arguments and returns a result
        allways returns the same value when given the same arguments, allows memoization
        is allowed to change local variables, including pass by value arguments
        has no side effects
        can be called at any time
        can be called from any thread
        is easy to compose with other functions
        is easy to test
        is easy to reason about
    Make functions pure if possible
    Mathods should not be pure functions
        This is not about pure virtuals, which is a different thing
        Pure methods should be functions
            Remember that the object itself is an argument, so methods like "empty()" are not considered pure

Variables
    Name variables after what they represent
        Not the type
        Do not use abbreviations, generally
        It is OK to use abbreviations that are
            Commonly known and unambigous in the business field
            Loop index variables (i, j, k...)
            Limited to a very small scope
    Use a variable for a single purpose
        There is some temptation to reuse variables for new purposes later in functions, avoid this
    Const variables where possible
        Do not declare variables until they can be given a value
            It is OK to call a function to get the value
            Sometimes this function can be a lambda
        Do not change value of variables unless absolutely necessary
            Mostly they do not need changing
            Some do, mostly those that are used for iterations/loops
            Subexpressions can be given their own names if a complex result is needed
        So most variables can be const...
        Const variables are easier to reason about
        Even for the compiler, so sometimes it may allow for better optimization as well
    Stack vs heap
        Stack is much faster than heap
            Avoid memory allocation
            Hot in cache, heap is often cold
        Stack does not get fragmented
            Fragmentation of the heap can lead to serious problems
                Unable to allocate more memory
                C++ can have, but nobody gave it, a garbage collector, so memory lost is lost
                There may be plenty of memory free, but only in small chunks
        Do not use the heap unless necessary
        Stack is limited in size, much smaller than heap
            Stacks tend to be close to 1 MB though, so most local variables should reside on stack
            Some objects may need the heap
                Strings and collections tend to use the heap for storage even though they themselves can be on the stack
                Arrays tend to be on the stack unless explicitly on the heap
        
General
    Size of function
        There is no real consensus on correct function size, beyond "small"
        One study suggested about 40 lines for less bugs
        The more modern ideas are smaller than this
        I suggest "about 7 statements" as a "limit"
            This is just a gut feeling
            A method properly written with testing of arguments and exception safety can often be larger than this
            Most algorithms can be described in 7 steps or less
                Some of those steps may be complex and require separate functions
            Many functions will be smaller, one to three statements
            Some functions will be larger
                Functions that initialize data
                Functions that operates on large structures with many fields
                Functions that are just complex
            Guideline, not rule
        Large functions can be split into smaller functions, with descriptive names

Static methods
    Useful or just a complicated name for a free function
    Gives the function a strong relation to the class
        Easy for intellisense
        Ok for constructor-like functions
    Often abused
        Singleton antipattern
        Unrelated operations

constexpr
    Can be run at compiletime, or runtime
    Does not allow undefined behaviour, less bugs
    More capabilities as the language continues to grow
    When run at compiletime, can result in massive optimizations
        At the cost of compile speed
    