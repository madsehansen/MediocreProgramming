Standard library

Avoid reimplementing standard functionality
    The standard library is huge and contains a lot of goodies
        Get an overview of what is there
        Assume that others will be able to understand what code does when standard library is used
        The standard library is standard, so it is mostly available and is recognizable
    The implementers are better at it than you are
        They really are
        They spend a lot of time tuning and debugging and testing
        The standard library has been used by a lot of people and been found OK
    If reimplementing standard functionality is OK for you, where do you draw the line? printf()?
        Do not think that a description of how to do something is easier to read than using a standard name for what is being done
        It's just a simple for-loop!
            Yes, but it still needs to be interpreted by the reader
            It does not convey intent, what is the purpose for the loop?
            Classic for-loop that loops over a collection and breaks out when some condition is met
                Seen in a lot of code, but does not say what the purpose is
                Find an element to operate on?
                See if an element is present?
                See if an element is missing?
                Count the number of elements that satisfy the condition (implemented with a bug...)

Collections
    There are several useful collections in the standard library
    They cover the most useful cases, though computer architecture may override which collection is most useful
    They are designed to cooperate well with the algorithms
    Should be used more as basis for user defined collections than directly

Algorithms
    There are many algorithms, covering a lot of useful and common activities
    Some algorithms perform more obscure activities, that may be useful for what the code shall do
    The algorithms are designed to cooperate well with the collections

Other library functionalities
    IO
    Threads
    Chrono
